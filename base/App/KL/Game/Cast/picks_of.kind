// Returns the current picks of a player as a map of Coord->Letter
App.KL.Game.Cast.picks_of(
  player: String
  game: App.KL.Game
): App.KL.Game.Picks
  let result = {{}, Hexagonal.Axial.Map.new! } :: Pair<Map<Unit>, App.KL.Game.Picks>
  let casts  = game@casts
  log(List.show!((x) Char.to_string(x@letter), game@casts))

  for cast in casts with result:
    open cast 
    let {seen, map} = result
    if player =? cast.player then
      let skill = App.KL.Game.Cast.get_skill(cast, game)
      case skill {
        some:
          let coords_max = App.KL.Game.Skill.get_pattern(skill.value)
          let letter = Char.to_string(cast.letter)
          for i from 0 to coords_max with result:
            let target = cast.target[i]
            case target {
              some: { seen{letter} <- unit, Hexagonal.Axial.Map.set!(target.value, cast.letter, result@snd)}
              none: result
            }
          result
        none: result
      }
      
    else
      result
  
  result@snd
